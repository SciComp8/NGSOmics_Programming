# Goal: covert the ATCGs into dummy numbers under either additive or dominant genetic model

genotype_coder <- function(geno_import, maf_limit, error_value = 3){
  
  # Stacks the two columns of the current SNP into one double long vector
  geno_input <- mapply(c, geno_import[, seq(1, ncol(geno_import), 2)], geno_import[, seq(2, ncol(geno_import), 2)])
  
  # Inputs: geno_col is the vector of alleles from the last line, numSamples = number of rows, maf_limit = threshold of minor allele frequency (MAF)
  xa_converter <- function(geno_col, numSamples, maf_limit){
    
    # Calculate the frequency of each allele present at one particular locus
    geno_count <- table(geno_col) 
    
    # If the MAF is less than the maf_limit OR this locus has only one allele or no allele, return the error message
    if(min(geno_count)/length(geno_col) <= maf_limit | length(geno_count) < 2){
      # Return a vector of 3's, to be filtered out later.
      return(rep(error_value, numSamples)) 
    }
    
    # Otherwise find our minor allele
    minor_allele <- names(geno_count[geno_count == min(geno_count)])
    
    # Now pull apart the genotypes from the mapply, match up the positions for each person, and convert to 0-1-2
      # geno_col[1:numSamples] refers to each individual 1st allele at this locus
      # geno_col[(numSamples+1):length(geno_col)] refers to each individual 2nd allele at this locus
      # the conditional results in a boolean (T/F) but the vector operation (+) converts it to (1/0)
      # e.g., an individual with TT where T is the minor allele would have True + True = 2
    xa <- (geno_col[1:numSamples] == minor_allele) + (geno_col[(numSamples + 1):length(geno_col)] == minor_allele)
    
    # We want our dummy variable coding centered on 1 so take the minus of 1
    xa <- xa - 1
    return(xa)
  }
  
  # Take our input, apply our new xa_converter function to the input by column, with numSamples = nrow(data), and maf_limit = 0.05
  xa_mat  <- apply(geno_input, 2, xa_converter, numSamples = nrow(geno_import), maf_limit = 0.05)
  
  # Filter out any columns that have the set error value 3. 
    # (None of our real genotypes should have a value 3 so all these didn't pass our multiallelic or MAF filtering)
  xa_mat <- xa_mat[,xa_mat[1,]!=error_value]
  
  # To get our Xd dominance dummy variable coding use the algebra below.
  xd_mat <- 1 - 2*abs(xa_mat)
  
  # Return both the Xa and Xd dummy variable coding for our input matrix/data
  return(list(xa_mat,xd_mat))
}
